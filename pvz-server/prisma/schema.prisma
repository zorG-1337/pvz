// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Статус пользователя
enum UserStatus {
  USER
  ADMIN_PVZ
  SUPER_ADMIN
}

enum OrderStatus {
  CREATED
  IN_PROGRESS
  READY_FOR_PICKUP
  COMPLETED
  CANCELED
}



model Notification {
  id        String   @id @default(uuid())
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model PVZ {
  id          String   @id @default(uuid())
  name        String
  address     String
  description String?
  latitude    Float
  longitude   Float

  // Связь с пользователем-администратором
  admin       User     @relation(fields: [adminId], references: [id])
  adminId     String

  orders      Order[]
  reviews Review[]
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?        @default("John")
  surname       String?        @default("Doe #`${id}`")
  status        UserStatus     @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  notifications Notification[]
  orders        Order[]

  // Связь: пользователь может быть админом нескольких ПВЗ
  pvzs          PVZ[]
  reviews Review[]
}

model Order {
  id           String   @id @default(uuid())
  trackingCode String   @unique
  description  String?
  status       OrderStatus @default(CREATED)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Связь: заказ принадлежит пользователю
  user         User     @relation(fields: [userId], references: [id])
  userId       String

  // Связь: заказ привязан к конкретному ПВЗ
  pvz          PVZ?     @relation(fields: [pvzId], references: [id])
  pvzId        String?
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // Можно использовать Float, если нужны десятичные
  comment   String?
  createdAt DateTime @default(now())

  // Привязка к пользователю
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Привязка к ПВЗ
  pvz       PVZ      @relation(fields: [pvzId], references: [id])
  pvzId     String

}
